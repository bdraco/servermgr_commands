#!/usr/bin/env bash

###
### VARIABLES
###

path_servermgr_bundles="/Applications/Server.app/Contents/ServerRoot/usr/share/servermgrd/bundles"
path_output_folder="/Users/erikberglund/GitHub/servermgr_commands"
github_base_url="https://github.com/erikberglund/servermgr_commands/blob/master"

###
### FUNCTIONS
###

create_folder() {
    # https://github.com/erikberglund/Scripts/blob/master/functions/Bash/create_folder/create_folder.sh
    for create_folder_folder in "${@}"; do
        
        # If folder path contains a mounted volume, check if volume is mounted before creating folder
        if [[ ${create_folder_folder} =~ ^/Volumes ]]; then
            local create_folder_folder_volume_mountpoint=$( awk -F"/" '{ print "/"$2"/"$3 }' <<< "${create_folder_folder}" )
            if [[ ! -d "${create_folder_folder_volume_mountpoint}" ]]; then
                printf "%s %s\n" "[$( basename ${BASH_SOURCE[0]}):${FUNCNAME}:${LINENO}]" "Unable to create folder: ${create_folder_folder}" >&2
                printf "%s %s\n" "[$( basename ${BASH_SOURCE[0]}):${FUNCNAME}:${LINENO}]" "Mountpoint referenced in target path does not exist" >&2
                exit 1
            fi
        fi
        
        # Check if folder exists, else create it
        if [[ -d ${create_folder_folder} ]]; then
            if [[ -w ${create_folder_folder} ]]; then
                printf "%s %s\n" "[${FUNCNAME}]" "Folder exist and current user ($( /usr/bin/id -un )) have write permissions."
            else
                printf "%s %s\n" "[${FUNCNAME}]" "Folder exist but current user ($( /usr/bin/id -un )) don't have write permissions."
            fi
        
        # Check if folder path exists and is a file, exit with error
        elif [[ -f ${create_folder_folder} ]]; then
            printf "%s %s\n" "[$( basename ${BASH_SOURCE[0]}):${FUNCNAME}:${LINENO}]" "Unable to create folder: ${create_folder_folder}" >&2
            printf "%s %s\n" "[$( basename ${BASH_SOURCE[0]}):${FUNCNAME}:${LINENO}]" "A file already exist at path" >&2
            exit 1
            
        # If passed all checks and folder doesn't exist, create it
        else
            create_folder_mkdir_output=$( /bin/mkdir -p "${create_folder_folder/#\~/$HOME}" 2>&1 )
            if (( ${?} == 0 )); then
                printf "%s %s\n" "[${FUNCNAME}]" "Folder '${create_folder_folder##*/}' was created successfully."
            else
                printf "%s %s\n" "[$( basename ${BASH_SOURCE[0]}):${FUNCNAME}:${LINENO}]" "Error creating folder: ${create_folder_folder}" >&2
                printf "%s %s\n" "[$( basename ${BASH_SOURCE[0]}):${FUNCNAME}:${LINENO}]" "$( /usr/bin/awk -F": " '{ print $3 }' <<< "${create_folder_mkdir_output}" )" >&2
                exit 1
            fi
        fi
    done
}

###
### MAIN SCRIPT
###

# Create output folder if it doesn't exist
if ! [[ -d ${path_output_folder} ]]; then
    create_folder "${path_output_folder}"
fi

# Loop through all bundles in servermgrd's bundle directory
for bundle in "${path_servermgr_bundles}"/*; do
    
    # Get path to current bundle binary
    bundle_binary="${bundle}/Contents/MacOS/$( basename ${bundle%.*} )"
    if ! [[ -f ${bundle_binary} ]]; then
        printf "%s\n" "Found no binary for bundle: ${bundle}"
        continue
    fi
    
    # Get path to current bundle output file
    path_output_file_bundle="${path_output_folder}/${bundle_binary##*/}.md"
    
    # Print header information
    {
        printf "%s\n\n" "# ${bundle_binary##*/}"
        printf "%s\n" '```console'
        printf "%s\n" "${bundle_binary}"
        printf "%s\n\n" '```'
        printf "%s\n\n" "# Commands"
    } > "${path_output_file_bundle}"
    
    bundle_command_description_titles=()
    
    # Loop through all parsed commands from bundle binary
    while read bundle_command; do
        printf "%s\n" "* [${bundle_command}](${github_base_url}/${path_output_file_bundle##*/}#$( tr '[:upper:]' '[:lower:]' <<< ${bundle_command} ))" >> "${path_output_file_bundle}"
        bundle_command_description_titles+=("## ${bundle_command}")
    done < <( strings "${bundle_binary}" | sed -nE 's/^\ ?([a-zA-Z]*)WithRequest:.*/\1/p' | awk '!/^init$/' | sort | uniq )
    
    printf "\n%s\n\n" "# Command Descriptions" >> "${path_output_file_bundle}"
    printf "%s\n\n" "${bundle_command_description_titles[@]}" >> "${path_output_file_bundle}"
done

exit 0